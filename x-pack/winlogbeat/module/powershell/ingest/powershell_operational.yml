---
description: Pipeline for Windows Powershell/Operational events
processors:
  ## ECS and Event fields.

  - set:
      field: ecs.version
      value: '1.12.0'
  - set:
      field: log.level
      copy_from: winlog.level
      ignore_empty_value: true
      ignore_failure: true
      if: ctx?.winlog?.level != ""
  - date:
      field: winlog.time_created
      formats:
        - ISO8601
      ignore_failure: true
      if: ctx?.winlog?.time_created != null
  - set:
      field: event.module
      value: powershell
  - set:
      field: event.kind
      value: event
  - set:
      field: event.code
      value: '{{winlog.event_id}}'
  - set:
      field: event.category
      value: process
  - set:
      field: event.type
      value: start
      if: ctx?.event.code == "4105"
  - set:
      field: event.type
      value: end
      if: ctx?.event.code == "4106"
  - set:
      field: event.type
      value: info
      if: ctx?.event?.type == null
  - convert:
      field: winlog.record_id
      type: string
      ignore_failure: true 
      ignore_missing: true

  ## Parse ContextInfo Blob

  - grok:
      field: "winlog.event_data.ContextInfo"
      description: Split Event 4103 ContextInfo
      tag: Split Event 4103 ContextInfo
      patterns:
        - '\s+Severity = %{DATA:winlog.event_data.Severity}\n\s+Host Name = %{DATA:process.title}\n\s+Host Version = %{DATA:powershell.process.executable_version}\n\s+Host ID = %{DATA:process.entity_id}\n\s+Host Application = %{GREEDYDATA:process.command_line}\n\s+Engine Version = %{DATA:powershell.engine.version}\n\s+Runspace ID = %{DATA:powershell.runspace_id}\n\s+Pipeline ID = %{DATA:powershell.pipeline_id}\n\s+Command Name = %{DATA:powershell.command.name}\n\s+Command Type = %{DATA:powershell.command.type}\n\s+Script Name = %{GREEDYDATA:winlog.event_data.ScriptName}\n\s+Command Path = %{DATA:powershell.command.path}\n\s+Sequence Number = %{NUMBER:event.sequence:long}\n\s+User = %{DATA:winlog.event_data.User}\n\s+Connected User = %{DATA:winlog.event_data.ConnectedUser}\n\s+Shell ID = %{DATA:powershell.id}.*'
        - '\s+Severity = %{DATA:winlog.event_data.Severity}\n\s+Host Name = %{DATA:process.title}\n\s+Host Version = %{DATA:powershell.process.executable_version}\n\s+Host ID = %{DATA:process.entity_id}\n\s+Host Application = %{GREEDYDATA:process.command_line}\n\s+Engine Version = %{DATA:powershell.engine.version}\n\s+Runspace ID = %{DATA:powershell.runspace_id}\n\s+Pipeline ID = %{DATA:powershell.pipeline_id}\n\s+Command Name = %{DATA:powershell.command.name}\n\s+Command Type = %{DATA:powershell.command.type}\n\s+Script Name = %{GREEDYDATA:winlog.event_data.ScriptName}\n\s+Command Path = %{DATA:powershell.command.path}\n\s+Sequence Number = %{NUMBER:event.sequence:long}\n\s+User = %{DATA:winlog.event_data.User}\n\s+Shell ID = %{DATA:powershell.id}.*'
      ignore_failure: true
      if: ctx?.event.code == "4103"

  ## User fields.

  - set:
      field: user.id
      copy_from: winlog.user.identifier
      ignore_failure: true
      ignore_empty_value: true
  - split:
      field: winlog.event_data.User
      target_field: "_temp.user_parts"
      separator: '\\'
      if: ctx?.winlog?.event_data?.User != null
  - set:
      field: user.domain
      value: "{{_temp.user_parts.0}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2
  - set:
      field: user.name
      value: "{{_temp.user_parts.1}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2
  - append:
      field: related.user
      value: "{{user.name}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx?.user?.name != null
  - split:
      field: winlog.event_data.ConnectedUser
      target_field: "_temp.connected_user_parts"
      separator: '\\'
      if: ctx?.winlog?.event_data?.ConnectedUser != null
  - set:
      field: source.user.domain
      value: "{{_temp.connected_user_parts.0}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2
  - set:
      field: source.user.name
      value: "{{_temp.connected_user_parts.1}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2
  - append:
      field: related.user
      value: "{{source.user.name}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx?.source?.user?.name != null
  - rename:
      field: user.domain
      target_field: destination.user.domain
      ignore_failure: true
      ignore_missing: true
      if: ctx?.source?.user != null
  - rename:
      field: user.name
      target_field: destination.user.name
      ignore_failure: true
      ignore_missing: true
      if: ctx?.source?.user != null
  - set:
      field: user.domain
      copy_from: source.user.domain
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?.source?.user != null
  - set:
      field: user.name
      copy_from: source.user.name
      ignore_failure: true
      ignore_empty_value: true
      if: ctx?.source?.user != null

  ## PowerShell fields.

  - convert:
      field: winlog.event_data.MessageTotal
      target_field: powershell.total
      type: long
      ignore_failure: true 
      ignore_missing: true
  - rename:
      field: winlog.event_data.ScriptBlockId
      target_field: powershell.file.script_block_id
      ignore_failure: true
      ignore_missing: true
      if: ctx?.winlog?.event_data?.ScriptBlockId != ""
  - rename:
      field: winlog.event_data.ScriptBlockText
      target_field: powershell.file.script_block_text
      ignore_failure: true
      ignore_missing: true
      if: ctx?.winlog?.event_data?.ScriptBlockText != ""

  - split:
      description: Split Event 4103 Payload details
      tag: Split Event 4103 Payload details
      field: winlog.event_data.Payload
      separator: "\n"
      ignore_failure: true
      ignore_missing: true
      if: ctx.event.code == "4103"
  - script:
      description: |-
        Parses all command invocation detail raw lines, and converts them to an object, based on their type.
         - for unexpectedly formatted ones: {value: "the raw line as it is"}
         - for all:
              * related_command: describes to what command it is related to
              * value: the value for that detail line
              * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError
         - additionally, ParameterBinding adds a `name` field with the parameter name being bound.
      lang: painless
      if: ctx.event.code == "4103"
      params:
        field: Payload
      source: |-
        def parseRawDetail(String raw) {
            Pattern detailRegex = /^([^:(]+)\(([^)]+)\)\:\s*(.+)?$/;
            Pattern parameterBindingRegex = /name\=(.+);\s*value\=(.+)$/;

            def matcher = detailRegex.matcher(raw);
            if (!matcher.matches()) {
                return ["value": raw];
            }
            def matches = new ArrayList();
            for (def i = 0; i <= matcher.groupCount(); i++) {
                matches.add(matcher.group(i));
            }
            
            if (matches.length != 4) {
                return ["value": raw];
            }                
            
            if (matches[1] != "ParameterBinding") {
                // Cleanup quotes around name and value.
                def value = matches[3] != null ? matches[3].trim() : "";
                if (value.length() > 2 && value.startsWith("\"") && value.endsWith("\"")) {
                    value = value.substring(1, value.length() - 1);
                }
                return [
                    "type": matches[1], 
                    "related_command": matches[2], 
                    "value": value
                ];
            }

            matcher = parameterBindingRegex.matcher(matches[3]);
            if (!matcher.matches()) {
                return ["value": matches[4]];
            }
            def nameValMatches = new ArrayList();
            for (def i = 0; i <= matcher.groupCount(); i++) {
                nameValMatches.add(matcher.group(i));
            }
            if (nameValMatches.length !== 3) {
                return ["value": matches[3]];
            }
            
            // Cleanup quotes around name and value.
            def paramName = nameValMatches[1].trim();
            if (paramName.length() > 2 && paramName.startsWith("\"") && paramName.endsWith("\"")) {
                paramName = paramName.substring(1, paramName.length() - 1);
            }

            def paramValue = nameValMatches[2].trim();
            if (paramValue.length() > 2 && paramValue.startsWith("\"") && paramValue.endsWith("\"")) {
                paramValue = paramValue.substring(1, paramValue.length() - 1);
            }

            return [
                "type": matches[1],
                "related_command": matches[2],
                "name": paramName,
                "value": paramValue
            ];
        }

        if (ctx?._temp == null) {
            ctx._temp = new HashMap();
        }

        if (ctx._temp.details == null) {
            ctx._temp.details = new ArrayList();
        }

        def values = ctx?.winlog?.event_data[params["field"]];
        if (values != null && values.length > 0) {
            for (v in values) {
                ctx._temp.details.add(parseRawDetail(v));
            }
        }
  - rename:
      field: _temp.details
      target_field: powershell.command.invocation_details
      if: ctx?._temp?.details != null && ctx?._temp?.details.length > 0

  - script:
      description: Implements Windows-like SplitCommandLine
      lang: painless
      if: ctx?.process?.command_line != null && ctx.process.command_line != ""
      source: |-
        // appendBSBytes appends n '\\' bytes to b and returns the resulting slice.
        def appendBSBytes(StringBuilder b, int n) {
            for (; n > 0; n--) {
                b.append('\\');
            }
            return b;
        }

        // readNextArg splits command line string cmd into next
        // argument and command line remainder.
        def readNextArg(String cmd) {
            def b = new StringBuilder();
            boolean inquote;
            int nslash;
            for (; cmd.length() > 0; cmd = cmd.substring(1)) {
                def c = cmd.charAt(0);
                if (c == (char)' ' || c == (char)0x09) {
                    if (!inquote) {
                        return [
                            "arg":  appendBSBytes(b, nslash).toString(),
                            "rest": cmd.substring(1)
                        ];
                    }
                } else if (c == (char)'"') {
                    b = appendBSBytes(b, nslash/2);
                    if (nslash%2 == 0) {
                        // use "Prior to 2008" rule from
                        // http://daviddeley.com/autohotkey/parameters/parameters.htm
                        // section 5.2 to deal with double double quotes
                        if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'"') {
                            b.append(c);
                            cmd = cmd.substring(1);
                        }
                        inquote = !inquote;
                    } else {
                        b.append(c);
                    }
                    nslash = 0;
                    continue;
                } else if (c == (char)'\\') {
                    nslash++;
                    continue;
                }
                b = appendBSBytes(b, nslash);
                nslash = 0;
                b.append(c);
            }
            return [
                "arg":  appendBSBytes(b, nslash).toString(), 
                "rest": ''
            ];
        }

        // commandLineToArgv splits a command line into individual argument
        // strings, following the Windows conventions documented
        // at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV
        // Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1
        def commandLineToArgv(String cmd) {
            def args = new ArrayList();
            while (cmd.length() > 0) {
                if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {
                    cmd = cmd.substring(1);
                    continue;
                }
                def next = readNextArg(cmd);
                cmd = next.rest;
                args.add(next.arg);
            }
            return args;
        }

        ctx.process.args = commandLineToArgv(ctx.process.command_line);
        ctx.process.args_count = ctx.process.args.length;
 
  ## File Fields

  - script:
      description: Adds file information.
      lang: painless
      if: ctx?.winlog?.event_data?.ScriptName != null && ctx.winlog.event_data.ScriptName.length() > 1
      source: |-
        def path = ctx.winlog.event_data.ScriptName;
        def idx = path.lastIndexOf("\\");
        if (idx > -1) {
            if (ctx?.file == null) {
                ctx.file = new HashMap();
            }
            ctx.file.name = path.substring(idx+1);
            ctx.file.directory = path.substring(0, idx);

            def extIdx = path.lastIndexOf(".");
            if (extIdx > -1) {
                ctx.file.extension = path.substring(extIdx+1);
            }
        }
  - rename:
      field: winlog.event_data.ScriptName
      target_field: file.path
      ignore_failure: true
      ignore_missing: true
      if: ctx?.winlog?.event_data?.ScriptName != ""

  - script:
      description: Use CommandPath if ScriptName is empty.
      tag: Use CommandPath if ScriptName is empty
      lang: painless
      if: ctx?.file?.path == null && ctx?.powershell?.command?.path != null && ctx.powershell.command.path.length() > 1
      source: |-
        def path = ctx.powershell.command.path;
        def idx = path.lastIndexOf("\\");
        if (idx > -1) {
            if (ctx?.file == null) {
                ctx.file = new HashMap();
            }
            ctx.file.path = path;
            ctx.file.name = path.substring(idx+1);
            ctx.file.directory = path.substring(0, idx);

            def extIdx = path.lastIndexOf(".");
            if (extIdx > -1) {
                ctx.file.extension = path.substring(extIdx+1);
            }
        }

  - script:
      description: Process ScriptBlock File Path
      tag: Process ScriptBlock File Path
      lang: painless
      if: ctx?.winlog?.event_data?.Path != null && ctx?.winlog?.event_data?.Path.length() > 1
      source: |-
        def path = ctx.winlog.event_data.Path;
        def idx = path.lastIndexOf("\\");
        if (idx > -1) {
            if (ctx?.file == null) {
                ctx.file = new HashMap();
            }
            ctx.file.path = path;
            ctx.file.name = path.substring(idx+1);
            ctx.file.directory = path.substring(0, idx);

            def extIdx = path.lastIndexOf(".");
            if (extIdx > -1) {
                ctx.file.extension = path.substring(extIdx+1);
            }
        }

  ## Cleanup.

  - remove:
      field:
        - _temp
        - winlog.event_data.User
        - winlog.event_data.ConnectedUser
        - winlog.event_data.ContextInfo
        - winlog.event_data.Severity
        - winlog.event_data.MessageTotal
        - winlog.event_data.MessageNumber
        - winlog.event_data.Payload
        - winlog.time_created
        - winlog.level
      ignore_missing: true
      ignore_failure: true
  - script:
      description: Recursively remove all empty values from specific nodes.
      lang: painless
      source: |-
        void removeEmptyValues(Map map) {
          map.entrySet().removeIf(entry -> {
            if (entry.getValue() instanceof Map) {
              removeEmptyValues((Map) entry.getValue());
              return ((Map) entry.getValue()).isEmpty();
            } else if (entry.getValue() instanceof List) {
              ((List) entry.getValue()).removeIf(item -> item == null || item.equals(""));
              return ((List) entry.getValue()).isEmpty();
            } else {
              return entry.getValue() == null || entry.getValue().equals("");
            }
          });
        }

        if (ctx?.winlog?.event_data != null) {
          removeEmptyValues(ctx.winlog?.event_data);
        }

        if (ctx?.powershell != null) {
          removeEmptyValues(ctx.powershell);
        }
  - remove:
      description: Remove empty event data.
      field: winlog.event_data
      ignore_missing: true
      ignore_failure: true
      if: ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0

on_failure:
  - set:
      field: "error.message"
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
